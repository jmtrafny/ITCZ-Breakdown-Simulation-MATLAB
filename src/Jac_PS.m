function jacmean = Jac(f1,f2,dx)

% The Jacobian Operator of two fields, f1 and f2 with a square grid spacing
% of dx.  Uses cyclic boundary conditions in the y direction. The Jacobian
% is not calculated for the first two rows.  

[imax,jmax]  =size(f1);
[imax2,jmax2]=size(f2);
if (imax ~= imax2) || (jmax ~= jmax2)
    warning('Array dimensions of input fields do not match. Exiting program')
    return
end

fourdx2 = 4*dx^2; % Calculate 4*dx^2 once and use multiple times. 

Jac1 = zeros(imax,jmax);
Jac2 = zeros(imax,jmax);
Jac3 = zeros(imax,jmax);

%% Calculate Jac1        
Jac1(3:imax-2,2:jmax-1) = ((f1(3:imax-2,3:jmax)-f1(3:imax-2,1:jmax-2)).*  ...
                           (f2(4:imax-1,2:jmax-1)-f2(2:imax-3,2:jmax-1))- ...
                           (f1(4:imax-1,2:jmax-1)-f1(2:imax-3,2:jmax-1)).*  ...
                           (f2(3:imax-2,3:jmax)-f2(3:imax-2,1:jmax-2)))/fourdx2;
   
%for left boundary cyclic conditions
Jac1(3:imax-2,1) = ((f1(3:imax-2,2)-f1(3:imax-2,jmax)).* ...
                    (f2(4:imax-1,1)-f2(2:imax-3,1))- ...
                    (f1(4:imax-1,1)-f1(2:imax-3,1)).* ...
                    (f2(3:imax-2,2)-f2(3:imax-2,jmax)))/fourdx2;

%for right boundary
Jac1(3:imax-2,jmax) =((f1(3:imax-2,1)-f1(3:imax-2,jmax-1)).* ...
                      (f2(4:imax-1,jmax)-f2(2:imax-3,jmax))- ...
                      (f1(4:imax-1,jmax)-f1(2:imax-3,jmax)).* ...
                      (f2(3:imax-2,1)-f2(3:imax-2,jmax-1)))/fourdx2;



%% Calculate Jac2
Jac2(3:imax-2,2:jmax-1)= (f1(3:imax-2,3:jmax).*(f2(4:imax-1,3:jmax)-f2(2:imax-3,3:jmax)) ...
                        - f1(3:imax-2,1:jmax-2).*(f2(4:imax-1,1:jmax-2)-f2(2:imax-3,1:jmax-2))  ...
                        - f1(4:imax-1,2:jmax-1).*(f2(4:imax-1,3:jmax)-f2(4:imax-1,1:jmax-2))+ ...
                        + f1(2:imax-3,2:jmax-1).*(f2(2:imax-3,3:jmax)-f2(2:imax-3,1:jmax-2)))/fourdx2;


%for left boundary
Jac2(3:imax-2,1) = (f1(3:imax-2,2).*(f2(4:imax-1,2)-f2(2:imax-3,2))...
                   -f1(3:imax-2,jmax).*(f2(4:imax-1,jmax)-f2(2:imax-3,jmax))...
                   -f1(4:imax-1,1).*(f2(4:imax-1,2)-f2(4:imax-1,jmax)) + ...
                   +f1(2:imax-3,1).*(f2(2:imax-3,2)-f2(2:imax-3,jmax)))/fourdx2;

%for right boundary
Jac2(3:imax-2,jmax) = (f1(3:imax-2,1).*(f2(4:imax-1,1)-f2(2:imax-3,1)) ...
                     - f1(3:imax-2,jmax-1).*(f2(4:imax-1,jmax-1)-f2(2:imax-3,jmax-1)) ...
                     - f1(4:imax-1,jmax).*(f2(4:imax-1,1)-f2(4:imax-1,jmax-1)) ...
                     + f1(2:imax-3,jmax).*(f2(2:imax-3,1)-f2(2:imax-3,jmax-1)))/fourdx2;


%% Calculate J3
Jac3(3:imax-2,2:jmax-1) = (f2(4:imax-1,2:jmax-1).*(f1(4:imax-1,3:jmax)-  f1(4:imax-1,1:jmax-2))...
                         -f2(2:imax-3,2:jmax-1).*(f1(2:imax-3,3:jmax)-  f1(2:imax-3,1:jmax-2))...
                         -f2(3:imax-2,3:jmax).*(f1(4:imax-1,3:jmax)-  f1(2:imax-3,3:jmax))...
                         +f2(3:imax-2,1:jmax-2).*(f1(4:imax-1,1:jmax-2)-f1(2:imax-3,1:jmax-2)))/fourdx2;
 
%for left boundary
Jac3(3:imax-2,1) = (f2(4:imax-1,1).*(f1(4:imax-1,2)-  f1(4:imax-1,jmax))...
                         -f2(2:imax-3,1).*(f1(2:imax-3,2)-  f1(2:imax-3,jmax))...
                         -f2(3:imax-2,2).*(f1(4:imax-1,2)-  f1(2:imax-3,2))...
                         +f2(3:imax-2,jmax).*(f1(4:imax-1,jmax)-f1(2:imax-3,jmax)))/fourdx2;

%for right boundary
Jac3(3:imax-2,jmax) = (f2(4:imax-1,jmax).*(f1(4:imax-1,1)-  f1(4:imax-1,jmax-1))...
                         -f2(2:imax-3,jmax).*(f1(2:imax-3,1)-  f1(2:imax-3,jmax-1))...
                         -f2(3:imax-2,1).*(f1(4:imax-1,1)-  f1(2:imax-3,1))...
                         +f2(3:imax-2,jmax-1).*(f1(4:imax-1,jmax-1)-f1(2:imax-3,jmax-1)))/fourdx2;

%%
jacmean = (Jac1+Jac2+Jac3)/3;
end